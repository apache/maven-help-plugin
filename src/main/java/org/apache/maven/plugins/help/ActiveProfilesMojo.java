/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.maven.plugins.help;

import java.io.IOException;
import java.util.List;

import org.apache.maven.api.Project;
import org.apache.maven.api.model.InputLocation;
import org.apache.maven.api.model.InputSource;
import org.apache.maven.api.model.Profile;
import org.apache.maven.api.plugin.MojoException;
import org.apache.maven.api.plugin.annotations.Mojo;
import org.apache.maven.api.plugin.annotations.Parameter;

/**
 * Displays a list of the profiles which are currently active for this build.
 *
 * @since 2.0
 */
@Mojo(name = "active-profiles", aggregator = true)
public class ActiveProfilesMojo extends AbstractHelpMojo {
    // ----------------------------------------------------------------------
    // Mojo parameters
    // ----------------------------------------------------------------------

    /**
     * This is the list of projects currently slated to be built by Maven.
     */
    @Parameter(defaultValue = "${session.projects}", required = true, readonly = true)
    private List<Project> projects;

    // ----------------------------------------------------------------------
    // Public methods
    // ----------------------------------------------------------------------

    /** {@inheritDoc} */
    public void execute() throws MojoException {
        StringBuilder message = new StringBuilder();

        for (Project project : projects) {
            getActiveProfileStatement(project, message);

            message.append(LS).append(LS);
        }

        if (output != null) {
            StringBuilder sb = new StringBuilder();
            sb.append("Generated by Maven Help Plugin").append(LS);
            sb.append("See: https://maven.apache.org/plugins/maven-help-plugin/")
                    .append(LS)
                    .append(LS);
            sb.append(message);

            try {
                writeFile(output, sb);
            } catch (IOException e) {
                throw new MojoException("Cannot write active profiles to output: " + output, e);
            }

            getLog().info("Active profile report written to: " + output);
        } else {
            getLog().info(message);
        }
    }

    // ----------------------------------------------------------------------
    // Private methods
    // ----------------------------------------------------------------------

    /**
     * Method to get the active profiles for the project
     *
     * @param project   the current project
     * @param message   the object where the information will be appended to
     */
    private void getActiveProfileStatement(Project project, StringBuilder message) {
        List<Profile> activeProfileIds = project.getEffectiveActiveProfiles();

        message.append(LS);
        message.append("Active Profiles for Project '").append(project.getId()).append("':");
        message.append(LS).append(LS);

        if (activeProfileIds.isEmpty()) {
            message.append("There are no active profiles.");
        } else {
            message.append("The following profiles are active:").append(LS);

            for (Profile profile : activeProfileIds) {
                message.append(LS).append(" - ").append(profile.getId());
                message.append(" (source: ").append(getProfileSource(profile)).append(")");
            }
        }

        message.append(LS);
    }

    private static String getProfileSource(Profile profile) {
        InputLocation location = profile.getLocation("");
        InputSource src = location != null ? location.getSource() : null;
        String loc = src != null ? src.getLocation() != null ? src.getLocation() : src.getModelId() : null;
        return loc != null ? loc : profile.getSource();
    }
}
